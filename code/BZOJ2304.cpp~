#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
using namespace std;

#define ll long long
#define mem(Arr,x) memset(Arr,x,sizeof(Arr))
#define Find(Arr,size,x) (lower_bound(&Arr[1],&Arr[size+1],x)-Arr)

const int maxN=2010;
const int maxNode=maxN*20;
const int maxM=maxNode*4;
const int inf=2147483647;

class Point
{
public:
	int x,y;
};

int n,Sx,Sy,Tx,Ty;
int A[maxN],B[maxN],C[maxN],D[maxN];
int nx,Nx[maxNode],ny,Ny[maxNode];
int edgecnt=0,Head[maxNode],Next[maxM],V[maxM],W[maxM];
int stu[maxN][maxN],Id[maxN][maxN];
Point P[maxNode];
bool Exi[maxN];

int main(){
	int TTT;scanf("%d",&TTT);
	while (TTT--){
		nx=ny=edgecnt=0;mem(Nx,0);mem(Ny,0);mem(stu,0);mem(Id,0);mem(Head,-1);mem(Exi,0);
		scanf("%d%d%d%d",&Sx,&Sy,&Tx,&Ty);
		Nx[++nx]=sx;Nx[++nx]=Tx;Ny[++ny]=Sy,Ny[++ny]=Ty;
		scanf("%d",&n);
		bool flag=1;
		for (int i=1;i<=n;i++){
			scanf("%d%d%d%d",&A[i],&B[i],&C[i],&D[i]);Exi[i]=1;
			if ((A[i]<=Sx)&&(C[i]>=Sx)&&(B[i]<=Sy)&&(D[i]>=Sy)) flag=0;
			if ((A[i]<=Tx)&&(C[i]>=Tx)&&(B[i]<=Ty)&&(D[i]>=Ty)) flag=0;
			Nx[++nx]=A[i];Nx[++nx]=C[i];Ny[++ny]=B[i];Ny[++ny]=D[i];
		}
		if (flag==0){
			printf("No Path\n");continue;
		}
		for (int i=1;i<=n;i++)
			for (int j=1;j<=n;j++)
				if (i!=j)
					if ((A[j]<=A[i])&&(B[j]<=B[i])&&(C[j]>=C[i])&&(D[j]>=D[i])){
						Exi[i]=0;break;
					}
		sort(&Nx[1],&Nx[nx+1]);nx=unique(&Nx[1],&Nx[nx+1])-Nx-1;
		sort(&Ny[1],&Ny[ny+1]);ny=unique(&Ny[1],&Ny[ny+1])-Ny-1;
		Sx=Find(Nx,nx,Sx);Sy=Find(Ny,ny,Sy);Tx=Find(Nx,nx,Tx);Ty=Find(Ny,ny,Ty);
		for (int i=1;i<=n;i++) A[i]=Find(Nx,nx,A[i]),B[i]=Find(Ny,ny,B[i]),C[i]=Find(Nx,nx,C[i]),D[i]=Find(Ny,ny,D[i]);
		for (int i=1;i<=n;i++){
			if (Exi[i]==0) continue;
			
		}
	}
}

#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
using namespace std;

#define ll long long
#define mem(Arr,x) memset(Arr,x,sizeof(Arr))

const int maxN=1010000;
const int maxM=maxN<<1;
const int inf=2147483647;

int n,g,K;
int Seq[maxN];
int edgecnt=0,Head[maxN],Next[maxM],V[maxM],Dg[maxN];
ll L[maxN],R[maxN];

void Add_Edge(int u,int v);
void dfs(int u,int fa);
void Mark(int u,ll l,ll r);

int main(){
	mem(Head,-1);
	scanf("%d%d%d",&n,&g,&K);
	for (int i=1;i<=g;i++) scanf("%d",&Seq[i]);
	sort(&Seq[1],&Seq[g]);
	int s,t;
	for (int i=1;i<n;i++){
		int u,v;scanf("%d%d",&u,&v);
		if (i==1) s=u,t=v;
		Add_Edge(u,v);Add_Edge(v,u);
	}
	Mark(s,K,K);
	Mark(t,K,K);
	dfs(s,t);dfs(t,s);

	//for (int i=1;i<=n;i++) cout<<"["<<L[i]<<","<<R[i]<<"]"<<endl;
	ll Ans=0;
	for (int i=1;i<=n;i++)
		if (Dg[i]==1){
			if ((L[i]==-1)||(Seq[g]<L[i])||(Seq[1]>R[i])) continue;
			int op=0,ed=-1;
			int l=1,r=g;
			if (L[i]<=Seq[1]) op=1;
			else do{
				int mid=(l+r)>>1;
				if (Seq[mid]>=L[i]) op=mid,r=mid-1;
				else l=mid+1;
			}
			while (l<=r);
			l=1;r=g;
			if (R[i]>=Seq[g]) ed=g;
			else if (R[i]==-1) ed=g;
			else do{
				int mid=(l+r)>>1;
				if (Seq[mid]<=R[i]) ed=mid,l=mid+1;
				else r=mid-1;
			}
			while (l<=r);

			//cout<<i<<" "<<op<<" "<<ed<<endl;

			Ans=Ans+(ed-op+1);
		}
	printf("%lld\n",Ans*K);return 0;
}

void Add_Edge(int u,int v){
	Next[++edgecnt]=Head[u];Head[u]=edgecnt;V[edgecnt]=v;Dg[u]++;
	return;
}

void dfs(int u,int fa){
	for (int i=Head[u];i!=-1;i=Next[i])
		if (V[i]!=fa){
			Mark(V[i],L[u],R[u]);dfs(V[i],u);
		}
	return;
}

void Mark(int u,ll l,ll r){
	if (Dg[u]==1) L[u]=l,R[u]=r;
	else{
		ll d=Dg[u]-1;
		if (l==-1) {L[u]=R[u]=-1;return;}
		else if (l*d>Seq[g]) {L[u]=R[u]=-1;return;}
		else L[u]=l*d;
		
		if (r==-1) R[u]=-1;
		else if (r*d+d-1>Seq[g]) R[u]=-1;
		else R[u]=r*d+d-1;
	}
	return;
}

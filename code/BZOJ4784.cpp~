#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
using namespace std;

#define ll long long
#define mem(Arr,x) memset(Arr,x,sizeof(Arr))

const int maxN=505000;
const int maxM=1010000*2;
const int Mod=998244353;
const int inf=2147483647;

int n,m;
int edgecnt=0,Head[maxN],Next[maxM],V[maxM];
int NodeW[maxN];
bool vis[maxN];
int F[maxN],G[maxN];

void Add_Edge(int u,int v);
void dfs_check(int u,int fa);
void dfs_dp(int u,int fa);

int main()
{
	G[0]=G[1]=1;
	for (int i=2;i<maxN;i++) G[i]=(G[i-1]+1ll*G[i-2]*(i-1)%Mod)%Mod;
	int TTT;scanf("%d",&TTT);
	while (TTT--)
	{
		edgecnt=-1;mem(Head,-1);mem(vis,0);
		int n,m;
		scanf("%d%d",&n,&m);
		for (int i=1;i<=m;i++)
		{
			int u,v;scanf("%d%d",&u,&v);
			Add_Edge(u,v);
		}

		for (int i=1;i<=n;i++) if (vis[i]==0) dfs_check(1,0);

		bool flag=1;
		for (int i=1;i<=n;i++) if (NodeW[i]>=2) flag=0;
		if (flag==0){
			printf("0\n");continue;
		}

		int Ans=1;
		mem(vis,0);
		for (int i=1;i<=n;i++)
			if ((vis[i]==0)&&(NodeW[i]==0)){
				dfs_dp(i,i);
				Ans=1ll*Ans*F[i]%Mod;
			}

		printf("%d\n",Ans);
	}
	return 0;
}

void Add_Edge(int u,int v){
	Next[++edgecnt]=Head[u];Head[u]=edgecnt;V[edgecnt]=v;
	Next[++edgecnt]=Head[v];Head[v]=edgecnt;V[edgecnt]=u;
	return;
}

void dfs_check(int u,int fa)
{
	vis[u]=1;
	for (int i=Head[u];i!=-1;i=Next[i])
		if (V[i]!=fa){
			if (vis[V[i]]) NodeW[u]++,NodeW[V[i]]--;
			else{
				dfs_check(V[i],u);NodeW[u]+=NodeW[V[i]];
			}
		}
	return;
}

void dfs_dp(int u,int fa)
{
	F[u]=0;int w=1,son=0;vis[u]=1;
	for (int i=Head[u];i!=-1;i=Next[i])
		if ((V[i]!=fa)&&(NodeW[V[i]]==0)){
			dfs_dp(V[i],u);son++;
			w=1ll*w*F[V[i]]%Mod;
		}
	if (u!=fa) F[u]=1ll*w*G[son+1]%Mod;
	else F[u]=1ll*w*G[son]%Mod;
	//cout<<u<<" : "<<F[u]<<endl;
	return;
}

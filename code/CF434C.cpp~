#include<iostream>
#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<algorithm>
#include<queue>
using namespace std;

#define ll long long
#define mem(Arr,x) memset(Arr,x,sizeof(Arr))

const int maxN=210;
const int maxAlpha=20;
const int maxK=510;
const int Mod=1e9+7;
const int inf=2147483647;

int n,m;
int nodecnt=0,root=0;
int son[maxAlpha][maxN],fail[maxN],Val[maxN];
int Llen,L[maxN],Rlen,R[maxN],Seq[maxN];
int F[2][maxN][maxK];
queue<int> Q;

void Insert(int len);
void GetFail();
int Calc(int len,int *Up);

int main(){
	scanf("%d%d",&n,&m);
	scanf("%d",&Llen);
	for (int i=1;i<=Llen;i++) scanf("%d",&L[i]);
	scanf("%d",&Rlen);
	for (int i=1;i<=Rlen;i++) scanf("%d",&R[i]);

	for (int i=1;i<=n;i++){
		int len;scanf("%d",&len);
		for (int j=1;j<=len;j++) scanf("%d",&Seq[i]);
		Insert(len);
	}

	
}

void Insert(int len){
	int now=root;
	for (int i=1;i<=len;i++){
		if (son[Seq[i]][now]==0) son[Seq[i]][now]=++nodecnt;
		now=son[Seq[i]][now];
	}
	int val;scanf("%d",&val);
	Val[now]+=val;return;
}

void GetFail(){
	while (!Q.empty()) Q.pop();
	for (int i=0;i<m;i++) if (son[i][0]) Q.push(son[i][0]);
	while (!Q.empty()){
		int u=Q.front();Q.pop();
		for (int i=0;i<m;i++)
			if (son[i][u]){
				fail[son[i][u]]=son[i][fail[u]];
				Val[son[i][u]]+=Val[fail[son[i][u]]];
				Q.push(son[i][u]);
			}
			else son[i][u]=son[i][fail[u]];
	}
	return;
}

int Calc(int len,int *Up){
	mem(F,0);
	F[0][0][0]=1;
	for (int i=0;i<len;i++)
		for (int j=0;j<=nodecnt;j++)
			
}
